#!/usr/bin/env wolframscript

(* 
(+x, +y, +z): Front, Right, Up

icosahedral vertices:
{phi, 1, 0}, {1, 0, phi}, {0, phi, 1}

edges:
Edge between {phi, 1, 0} and {phi, -1, 0}: {2 phi, 0, 0}
Edge between {phi, 1, 0} and {1, 0, phi}: {phi + 1, 1, phi}
sum of two edges:
{3 phi + 1, 1, phi}
Another edge over: {phi + 1, -1, -phi}

Rhombus in front: in plane: x = phi
+/- {phi, 1, 0}, +/- {phi, 0, phi - 1}

pyramid surface determined by:
{phi, 1, 0}, {phi, 0, phi - 1}, {0, 0, 0}

Cross[{phi, 0, phi - 1}, {phi, 1, 0}]
 *)


phi = (Sqrt[5] + 1)/2;
epsilon = 0.000000001;
faceTemplates = {
    {{phi + 1, 1, phi}, {2 phi, 0, 0}, {3 phi + 1, 1, phi} }
    , {{phi + 1, 1, phi}, {2 phi, 0, 0}, Cross[{phi, 0, phi - 1}, {phi, 1, 0}] }
    , {{phi + 1, 1, phi}, {2 phi, 0, 0}, {0, 1, 0} }
    , {{phi + 1, 1, phi}, {phi + 1, -1, -phi}, {0, 1, 0} }
    , {{phi, phi+1, 1}, {phi + 1, -1, -phi}, {0, 1, 0} } (* smallest surface *)
}//N;

faces = {};
rotations = { IdentityMatrix[3] };
generators = { RotationMatrix[2 Pi/5, {phi, 1, 0}], RotationMatrix[Pi, {0, 0, 1}], RotationMatrix[Pi, {1, 0, 0}] };

For[round = 1, round <= 3, round++,
    For[gid = 1, gid <= Length[generators], gid ++,
        generator = generators[[gid]];
        newRotations = {};
        For[rid = 1, rid <= Length[rotations], rid ++,
            rotation = rotations[[rid]];
            newRotation = generator.rotation;
            AppendTo[newRotations, newRotation];
        ];
        rotations = Union[rotations, newRotations, SameTest -> (Max[Abs[N[#1] - N[#2]]] < epsilon &)];
        Print[Length[rotations]];
    ];
];

For[tid = 1, tid <= Length[faceTemplates], tid ++,
    faceTemplate = faceTemplates[[tid]];
    For[rid = 1, rid <= Length[rotations], rid ++,
        rotation = rotations[[rid]];
        newFace = Map[#.rotation&, faceTemplate];
        newFace = FullSimplify[newFace];
        AppendTo[faces, newFace];
    ];    
];

pieces = Map[First, faces];
roundedPieces = Round[pieces, epsilon];
roundedPieces = Sort[Union[roundedPieces]];
uniquePieces = {};
For[pid = 1, pid <= Length[roundedPieces], pid++,
    uniquePiece = First[Select[pieces, EuclideanDistance[#, roundedPieces[[pid]]] < 10 * epsilon & ]];
    AppendTo[uniquePieces, uniquePiece];
];

Print["Rounded piece count"];
Print[Length[roundedPieces]];

Print["piece count"];
Print[Length[pieces]];

Print["unique piece count"];
Print[Length[uniquePieces]];

(* faces = Union[faces]; *)

Print["face (constraint) count"];
Print[Length[faces]];

(* Exit[]; *)

pieceLookup = <||>;

Print["Rounded pieces"];
(* Print[pieces]; *)
For[pid = 1, pid <= Length[roundedPieces], pid ++,
    piece = roundedPieces[[pid]];
    Print[{pid, piece, piece.{0, 0, 1}} ];
    pieceLookup[piece] = pid;
];

(* Exit[]; *)

(* Print[pieceLookup]; *)

pieceCoordinates = Array[x, {Length[roundedPieces], 3}];

pieceCoordinatesFlat = Flatten[pieceCoordinates];

gluedPairs = {
    (* below: (1-5), (26-30), (8,9,17,24,25), (6,7,14,22,23), 
    also two pairs (11,19) and (13,21) from (11,13,16,19,21), two pairs (10,18) and (12,20) from (10,12,15,18,20) *)
    (* {1, 2}, {1, 3}, {1, 4}, {1, 5}, {26, 27}, {26, 28}, {26, 29}, {26, 30}, *)
    (* {8, 9}, {8, 17}, {8, 24}, {8, 25}, {6, 7}, {6, 14}, {6, 22}, {6, 23}, *)
    (* {11, 19}, {13, 21}, {10, 18}, {12, 20} *)
    (* below: 3-fold grouping. unsuccessful*)
    (* {2, 6}, {2, 10}, {1, 2}, {21, 25}, {21, 29}, {30, 29} *)
    (* below: 1, 2, 3, 6, 7 *)
    (* {1, 2}, {1, 3}, {1, 6}, {1, 7} *)
    (* below: group of 10, 1, 2, 3, 6, 7,   4, 5, 10, 11, 14 *)
    (* {1, 2}, {1, 3}, {1, 6}, {1, 7}, {1, 4}, {1, 5}, {1, 10}, {1, 11}, {1, 14} *)
    (* below: group of 10 + 10:
    1, 2, 3, 6, 7,         4, 5, 10, 11, 14,
    24, 25, 28, 29, 30,    26, 27, 20, 21, 17
    *)
    (* {1, 2}, {1, 3}, {1, 6}, {1, 7}, {1, 4}, {1, 5}, {1, 10}, {1, 11}, {1, 14}, {24, 25}, {24, 28}, {24, 29}, {24, 30}, {24, 26}, {24, 27}, {24, 20}, {24, 21}, {24, 17} *)
    (* below: group of 10 + 10 + 2:
    group1: 1, 2, 3, 6, 7,         4, 5, 10, 11, 14,
    group2: 24, 25, 28, 29, 30,    26, 27, 20, 21, 17
    group3: 8, 9
    *)
    {1, 2}, {1, 3}, {1, 6}, {1, 7}, {1, 4}, {1, 5}, {1, 10}, {1, 11}, {1, 14}, {24, 25}, {24, 28}, {24, 29}, {24, 30}, {24, 26}, {24, 27}, {24, 20}, {24, 21}, {24, 17}, {8, 9}
    (* below: group of 10 + 10 + 2, second method:
    1, 2, 3, 6, 7,         4, 5, 10, 11, 14,
    24, 25, 28, 29, 30,    26, 27, 20, 21, 17
    8, 12
    *)
    (* {1, 2}, {1, 3}, {1, 6}, {1, 7}, {1, 4}, {1, 5}, {1, 10}, {1, 11}, {1, 14}, {24, 25}, {24, 28}, {24, 29}, {24, 30}, {24, 26}, {24, 27}, {24, 20}, {24, 21}, {24, 17}, {8, 12} *)
};

conditions = {
    (* pieceCoordinates[[30]][[1]] == 1.0, *)
    (* pieceCoordinates[[1]][[3]] == -1.0, *)
    (* pieceCoordinates[[1]][[2]] == -1.0/phi, *)
    pieceCoordinates[[1]][[1]] == -1.0
};

(* Exit[]; *)
(* uniform explosion *)
If[False,
    For[pid = 1, pid <= Length[uniquePieces], pid++,
        AppendTo[conditions, pieceCoordinates[[pid]][[1]] == uniquePieces[[pid]][[1]] ];
        AppendTo[conditions, pieceCoordinates[[pid]][[2]] == uniquePieces[[pid]][[2]] ];
        AppendTo[conditions, pieceCoordinates[[pid]][[3]] == uniquePieces[[pid]][[3]] ];
    ];
];

For[pid = 1, pid <= Length[gluedPairs], pid++,
    gluedPair = gluedPairs[[pid]];
    For[dim = 1, dim <= 3, dim++,
        AppendTo[conditions, pieceCoordinates[[gluedPair[[1]]]][[dim]] == pieceCoordinates[[gluedPair[[2]]]][[dim]] ];
    ];
];

For[fid = 1, fid <= Length[faces], fid++,
    face = faces[[fid]];
    piece1Id = pieceLookup[Round[face[[1]], epsilon]];
    piece2Id = pieceLookup[Round[face[[2]], epsilon]];
    condition = ( pieceCoordinates[[piece1Id]] - pieceCoordinates[[piece2Id]] ).face[[3]] >= - epsilon * 0.00001 ;
    AppendTo[conditions, condition];
];

For[dim = 1, dim <= 3, dim++,
    AppendTo[conditions, Total[Table[pieceCoordinates[[k]][[dim]], {k, 1, Length[roundedPieces]}]] == 0];
];

combinedConditions = Apply[ And, conditions];

Print["Starting FindInstance"];
solutions = FindInstance[
    combinedConditions,
    pieceCoordinatesFlat,
    Reals
];

(* Print[solutions]; *)
Print["Found these many solutions:"]
Print[solutions//Length];

For[sid = 1, sid <= Length[solutions], sid++,
    Print[sid];
    solution = solutions[[sid]];
    values = pieceCoordinates/.solution;
    values = Round[values, 0.000001];
    Print[values];
    (* values = Round[values, 1]; *)
    Print["piece and motion"];
    pieceAndMotion = {};
    For[pid = 1, pid <= Length[roundedPieces], pid++,
        AppendTo[pieceAndMotion, { roundedPieces[[pid]], values[[pid]]}];
    ];
    pieceAndMotion = SortBy[pieceAndMotion, Last];
    Map[Print, pieceAndMotion];

    motionTally = Tally[Map[Last, pieceAndMotion]];
    tallyCounts = Map[#[[2]]&, motionTally];
    Print["Groups"];
    Print[ tallyCounts ];
    Print[ tallyCounts//Length ];
];


(* 
Grouping:
10 + 10 + 1 * 10
    {1, 2}, {1, 3}, {1, 6}, {1, 7}, {1, 4}, {1, 5}, {1, 10}, {1, 11}, {1, 14},
    {24, 25}, {24, 28}, {24, 29}, {24, 30}, {24, 26}, {24, 27}, {24, 20}, {24, 21}, {24, 17}

piece and motion
{{-3.2360679770000003, 0., 0.}, {-1., -0.690983, 0.}}
{{-2.618033989, -1., -1.6180339890000002}, {-1., -0.690983, 0.}}
{{-2.618033989, -1., 1.6180339890000002}, {-1., -0.690983, 0.}}
{{-2.618033989, 1., -1.6180339890000002}, {-1., -0.690983, 0.}}
{{-2.618033989, 1., 1.6180339890000002}, {-1., -0.690983, 0.}}
{{-1.6180339890000002, -2.618033989, -1.}, {-1., -0.690983, 0.}}
{{-1.6180339890000002, -2.618033989, 1.}, {-1., -0.690983, 0.}}
{{-1., -1.6180339890000002, -2.618033989}, {-1., -0.690983, 0.}}
{{-1., -1.6180339890000002, 2.618033989}, {-1., -0.690983, 0.}}
{{0., -3.2360679770000003, 0.}, {-1., -0.690983, 0.}}
{{-1.6180339890000002, 2.618033989, -1.}, {-0.052786, 0.39442699999999997, -0.032624}}
{{-1.6180339890000002, 2.618033989, 1.}, {-0.052786, 0.39442699999999997, 0.032624}}
{{1., -1.6180339890000002, -2.618033989}, {0., -0.19098299999999999, -0.309017}}
{{1., -1.6180339890000002, 2.618033989}, {0., -0.19098299999999999, 0.309017}}
{{0., 0., -3.2360679770000003}, {0., 0., -0.361803}}
{{0., 0., 3.2360679770000003}, {0., 0., 0.361803}}
{{-1., 1.6180339890000002, -2.618033989}, {0., 0.19098299999999999, -0.309017}}
{{-1., 1.6180339890000002, 2.618033989}, {0., 0.19098299999999999, 0.309017}}
{{1.6180339890000002, -2.618033989, -1.}, {0.052786, -0.39442699999999997, -0.032624}}
{{1.6180339890000002, -2.618033989, 1.}, {0.052786, -0.39442699999999997, 0.032624}}
{{0., 3.2360679770000003, 0.}, {1., 0.690983, 0.}}
{{1., 1.6180339890000002, -2.618033989}, {1., 0.690983, 0.}}
{{1., 1.6180339890000002, 2.618033989}, {1., 0.690983, 0.}}
{{1.6180339890000002, 2.618033989, -1.}, {1., 0.690983, 0.}}
{{1.6180339890000002, 2.618033989, 1.}, {1., 0.690983, 0.}}
{{2.618033989, -1., -1.6180339890000002}, {1., 0.690983, 0.}}
{{2.618033989, -1., 1.6180339890000002}, {1., 0.690983, 0.}}
{{2.618033989, 1., -1.6180339890000002}, {1., 0.690983, 0.}}
{{2.618033989, 1., 1.6180339890000002}, {1., 0.690983, 0.}}
{{3.2360679770000003, 0., 0.}, {1., 0.690983, 0.}}
Groups
{10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10}
12

10+10+1*10, with vector constraints
conditions = {
    pieceCoordinates[[30]][[1]] == 1.0,
    (* pieceCoordinates[[1]][[3]] == -1.0, *)
    pieceCoordinates[[1]][[2]] == -1.0/phi,
    pieceCoordinates[[1]][[1]] == -1.0
};
piece and motion
{{-3.2360679770000003, 0., 0.}, {-1., -0.618034, 0.}}
{{-2.618033989, -1., -1.6180339890000002}, {-1., -0.618034, 0.}}
{{-2.618033989, -1., 1.6180339890000002}, {-1., -0.618034, 0.}}
{{-2.618033989, 1., -1.6180339890000002}, {-1., -0.618034, 0.}}
{{-2.618033989, 1., 1.6180339890000002}, {-1., -0.618034, 0.}}
{{-1.6180339890000002, -2.618033989, -1.}, {-1., -0.618034, 0.}}
{{-1.6180339890000002, -2.618033989, 1.}, {-1., -0.618034, 0.}}
{{-1., -1.6180339890000002, -2.618033989}, {-1., -0.618034, 0.}}
{{-1., -1.6180339890000002, 2.618033989}, {-1., -0.618034, 0.}}
{{0., -3.2360679770000003, 0.}, {-1., -0.618034, 0.}}
{{-1.6180339890000002, 2.618033989, -1.}, {-0.17082, 0.276393, -0.105573}}
{{-1.6180339890000002, 2.618033989, 1.}, {-0.17082, 0.276393, 0.105573}}
{{-1., 1.6180339890000002, -2.618033989}, {-0.105573, 0.17082, -0.276393}}
{{-1., 1.6180339890000002, 2.618033989}, {-0.105573, 0.17082, 0.276393}}
{{0., 0., -3.2360679770000003}, {0., 0., -0.341641}}
{{0., 0., 3.2360679770000003}, {0., 0., 0.341641}}
{{1., -1.6180339890000002, -2.618033989}, {0.105573, -0.17082, -0.276393}}
{{1., -1.6180339890000002, 2.618033989}, {0.105573, -0.17082, 0.276393}}
{{1.6180339890000002, -2.618033989, -1.}, {0.17082, -0.276393, -0.105573}}
{{1.6180339890000002, -2.618033989, 1.}, {0.17082, -0.276393, 0.105573}}
{{0., 3.2360679770000003, 0.}, {1., 0.618034, 0.}}
{{1., 1.6180339890000002, -2.618033989}, {1., 0.618034, 0.}}
{{1., 1.6180339890000002, 2.618033989}, {1., 0.618034, 0.}}
{{1.6180339890000002, 2.618033989, -1.}, {1., 0.618034, 0.}}
{{1.6180339890000002, 2.618033989, 1.}, {1., 0.618034, 0.}}
{{2.618033989, -1., -1.6180339890000002}, {1., 0.618034, 0.}}
{{2.618033989, -1., 1.6180339890000002}, {1., 0.618034, 0.}}
{{2.618033989, 1., -1.6180339890000002}, {1., 0.618034, 0.}}
{{2.618033989, 1., 1.6180339890000002}, {1., 0.618034, 0.}}
{{3.2360679770000003, 0., 0.}, {1., 0.618034, 0.}}
Groups
{10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10}
12


10 + 10 + 2*5:
piece and motion
{{-3.2360679770000003, 0., 0.}, {-1., -0.618034, 0.}}
{{-2.618033989, -1., -1.6180339890000002}, {-1., -0.618034, 0.}}
{{-2.618033989, -1., 1.6180339890000002}, {-1., -0.618034, 0.}}
{{-2.618033989, 1., -1.6180339890000002}, {-1., -0.618034, 0.}}
{{-2.618033989, 1., 1.6180339890000002}, {-1., -0.618034, 0.}}
{{-1.6180339890000002, -2.618033989, -1.}, {-1., -0.618034, 0.}}
{{-1.6180339890000002, -2.618033989, 1.}, {-1., -0.618034, 0.}}
{{-1., -1.6180339890000002, -2.618033989}, {-1., -0.618034, 0.}}
{{-1., -1.6180339890000002, 2.618033989}, {-1., -0.618034, 0.}}
{{0., -3.2360679770000003, 0.}, {-1., -0.618034, 0.}}

{{-1.6180339890000002, 2.618033989, -1.}, {-0.223853, 0.290695, 0.}}
{{-1.6180339890000002, 2.618033989, 1.}, {-0.223853, 0.290695, 0.}}

{{-1., 1.6180339890000002, -2.618033989}, {-0.09127099999999999, 0.07617299999999999, -0.347103}}
{{0., 0., -3.2360679770000003}, {-0.09127099999999999, 0.07617299999999999, -0.347103}}

{{-1., 1.6180339890000002, 2.618033989}, {-0.09127099999999999, 0.07617299999999999, 0.347103}}
{{0., 0., 3.2360679770000003}, {-0.09127099999999999, 0.07617299999999999, 0.347103}}

{{1., -1.6180339890000002, -2.618033989}, {0.12325, -0.270931, -0.214522}}
{{1.6180339890000002, -2.618033989, -1.}, {0.12325, -0.270931, -0.214522}}

{{1., -1.6180339890000002, 2.618033989}, {0.12325, -0.270931, 0.214522}}
{{1.6180339890000002, -2.618033989, 1.}, {0.12325, -0.270931, 0.214522}}

{{0., 3.2360679770000003, 0.}, {1.031979, 0.637798, 0.}}
{{1., 1.6180339890000002, -2.618033989}, {1.031979, 0.637798, 0.}}
{{1., 1.6180339890000002, 2.618033989}, {1.031979, 0.637798, 0.}}
{{1.6180339890000002, 2.618033989, -1.}, {1.031979, 0.637798, 0.}}
{{1.6180339890000002, 2.618033989, 1.}, {1.031979, 0.637798, 0.}}
{{2.618033989, -1., -1.6180339890000002}, {1.031979, 0.637798, 0.}}
{{2.618033989, -1., 1.6180339890000002}, {1.031979, 0.637798, 0.}}
{{2.618033989, 1., -1.6180339890000002}, {1.031979, 0.637798, 0.}}
{{2.618033989, 1., 1.6180339890000002}, {1.031979, 0.637798, 0.}}
{{3.2360679770000003, 0., 0.}, {1.031979, 0.637798, 0.}}

Groups
{10, 2, 2, 2, 2, 2, 10}
7

10 + 10 + 2*5 second way:
piece and motion
{{-3.2360679770000003, 0., 0.}, {-1., -0.618034, 0.}}
{{-2.618033989, -1., -1.6180339890000002}, {-1., -0.618034, 0.}}
{{-2.618033989, -1., 1.6180339890000002}, {-1., -0.618034, 0.}}
{{-2.618033989, 1., -1.6180339890000002}, {-1., -0.618034, 0.}}
{{-2.618033989, 1., 1.6180339890000002}, {-1., -0.618034, 0.}}
{{-1.6180339890000002, -2.618033989, -1.}, {-1., -0.618034, 0.}}
{{-1.6180339890000002, -2.618033989, 1.}, {-1., -0.618034, 0.}}
{{-1., -1.6180339890000002, -2.618033989}, {-1., -0.618034, 0.}}
{{-1., -1.6180339890000002, 2.618033989}, {-1., -0.618034, 0.}}
{{0., -3.2360679770000003, 0.}, {-1., -0.618034, 0.}}
{{-1.6180339890000002, 2.618033989, -1.}, {-0.119431, 0.26253499999999996, -0.207874}}
{{-1., 1.6180339890000002, -2.618033989}, {-0.119431, 0.26253499999999996, -0.207874}}
{{-1.6180339890000002, 2.618033989, 1.}, {-0.119431, 0.26253499999999996, 0.207874}}
{{-1., 1.6180339890000002, 2.618033989}, {-0.119431, 0.26253499999999996, 0.207874}}
{{0., 0., -3.2360679770000003}, {0.088443, -0.073812, -0.336347}}
{{1., -1.6180339890000002, -2.618033989}, {0.088443, -0.073812, -0.336347}}
{{0., 0., 3.2360679770000003}, {0.088443, -0.073812, 0.336347}}
{{1., -1.6180339890000002, 2.618033989}, {0.088443, -0.073812, 0.336347}}
{{1.6180339890000002, -2.618033989, -1.}, {0.216916, -0.28168699999999997, 0.}}
{{1.6180339890000002, -2.618033989, 1.}, {0.216916, -0.28168699999999997, 0.}}
{{0., 3.2360679770000003, 0.}, {0.969012, 0.598882, 0.}}
{{1., 1.6180339890000002, -2.618033989}, {0.969012, 0.598882, 0.}}
{{1., 1.6180339890000002, 2.618033989}, {0.969012, 0.598882, 0.}}
{{1.6180339890000002, 2.618033989, -1.}, {0.969012, 0.598882, 0.}}
{{1.6180339890000002, 2.618033989, 1.}, {0.969012, 0.598882, 0.}}
{{2.618033989, -1., -1.6180339890000002}, {0.969012, 0.598882, 0.}}
{{2.618033989, -1., 1.6180339890000002}, {0.969012, 0.598882, 0.}}
{{2.618033989, 1., -1.6180339890000002}, {0.969012, 0.598882, 0.}}
{{2.618033989, 1., 1.6180339890000002}, {0.969012, 0.598882, 0.}}
{{3.2360679770000003, 0., 0.}, {0.969012, 0.598882, 0.}}
Groups
{10, 2, 2, 2, 2, 2, 10}
7

(1-5), (26-30), (8,9,17,24,25), (6,7,14,22,23), 
also two pairs (11,19) and (13,21) from (11,13,16,19,21), two pairs (10,18) and (12,20) from (10,12,15,18,20)

{1, 2}, {1, 3}, {1, 4}, {1, 5}, {26, 27}, {26, 28}, {26, 29}, {26, 30},
{8, 9}, {8, 17}, {8, 24}, {8, 25}, {6, 7}, {6, 14}, {6, 22}, {6, 23},
{11, 19}, {13, 21}, {10, 18}, {12, 20}

piece and motion
{{-3.2360679770000003, 0., 0.}, {-1., 0., 0.}}
{{-2.618033989, -1., -1.6180339890000002}, {-1., 0., 0.}}
{{-2.618033989, -1., 1.6180339890000002}, {-1., 0., 0.}}
{{-2.618033989, 1., -1.6180339890000002}, {-1., 0., 0.}}
{{-2.618033989, 1., 1.6180339890000002}, {-1., 0., 0.}}
{{-1.6180339890000002, -2.618033989, -1.}, {0., -1.17082, 0.}}
{{-1.6180339890000002, -2.618033989, 1.}, {0., -1.17082, 0.}}
{{0., -3.2360679770000003, 0.}, {0., -1.17082, 0.}}
{{1.6180339890000002, -2.618033989, -1.}, {0., -1.17082, 0.}}
{{1.6180339890000002, -2.618033989, 1.}, {0., -1.17082, 0.}}
{{-1., -1.6180339890000002, -2.618033989}, {0., -0.9347519999999999, -0.276393}}
{{1., -1.6180339890000002, -2.618033989}, {0., -0.9347519999999999, -0.276393}}
{{-1., -1.6180339890000002, 2.618033989}, {0., -0.9347519999999999, 0.276393}}
{{1., -1.6180339890000002, 2.618033989}, {0., -0.9347519999999999, 0.276393}}
{{0., 0., -3.2360679770000003}, {0., 0., -0.534752}}
{{0., 0., 3.2360679770000003}, {0., 0., 0.534752}}
{{-1., 1.6180339890000002, -2.618033989}, {0., 0.9347519999999999, -0.276393}}
{{1., 1.6180339890000002, -2.618033989}, {0., 0.9347519999999999, -0.276393}}
{{-1., 1.6180339890000002, 2.618033989}, {0., 0.9347519999999999, 0.276393}}
{{1., 1.6180339890000002, 2.618033989}, {0., 0.9347519999999999, 0.276393}}
{{-1.6180339890000002, 2.618033989, -1.}, {0., 1.17082, 0.}}
{{-1.6180339890000002, 2.618033989, 1.}, {0., 1.17082, 0.}}
{{0., 3.2360679770000003, 0.}, {0., 1.17082, 0.}}
{{1.6180339890000002, 2.618033989, -1.}, {0., 1.17082, 0.}}
{{1.6180339890000002, 2.618033989, 1.}, {0., 1.17082, 0.}}
{{2.618033989, -1., -1.6180339890000002}, {1., 0., 0.}}
{{2.618033989, -1., 1.6180339890000002}, {1., 0., 0.}}
{{2.618033989, 1., -1.6180339890000002}, {1., 0., 0.}}
{{2.618033989, 1., 1.6180339890000002}, {1., 0., 0.}}
{{3.2360679770000003, 0., 0.}, {1., 0., 0.}}
Groups
{5, 5, 2, 2, 1, 1, 2, 2, 5, 5}
10



 *)